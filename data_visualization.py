# -*- coding: utf-8 -*-
"""Data102.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OUrhD2s4-RmJF-EpdFwIydAjeKGrNupk
"""

import pandas as pd

df = pd.read_csv("Food Bank Donations - Jan 2020 to Nov 2022 - May 2024.csv")

df_grouped

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# Group the dataframe by 'Contributor' and sum the 'Received Weight'
df_grouped = df.groupby('Contributor')['Received Weight'].sum().reset_index()

# Sort by 'Received Weight' in descending order
df_sorted = df_grouped.sort_values(by="Received Weight", ascending=False)

# Get the top 10 contributors
df_top10 = df_sorted.head(10)

# Plot horizontal bar chart
plt.figure(figsize=(10, 6))
plt.barh(df_top10['Contributor'], df_top10['Received Weight'], color='skyblue')

# Adding labels and title
plt.xlabel('Food (lbs)')
plt.ylabel('Contributor')
plt.title('Top 10 Contributors by Weight')

# Define your custom x-tick values (manually selected)
x_ticks = [0, 200000, 400000, 600000, 800000, 1000000, 1200000]  # Values in weight
x_tick_labels = ['0k', '200k', '400k', '600k', '800k', '1M', '1.2M']  # Custom labels

# Set the x-ticks to be the values you defined
plt.xticks(x_ticks, x_tick_labels)

# Save the plot with 300 DPI and adjust the bounding box to fit the content
plt.savefig('top_10_contributors.png', dpi=300, bbox_inches='tight')

# Show the plot
plt.tight_layout()
plt.show()

df_sorted

import pandas as pd

# Clean the 'Contributor' column by removing the store numbers and extra details after #
df['Contributor'] = df['Contributor'].str.replace(r'(\s*#\d+.*| - .*)', '', regex=True)

df_grouped = df["Contributor"]

"""------"""

import pandas as pd
df = pd.read_csv("Food Bank Donations - Jan 2020 to Nov 2022 - May 2024.csv")

df.columns

df["Received Date"]

df['Received Date'] = pd.to_datetime(df['Received Date'])
df['Received Date'] = df['Received Date'].dt.strftime('%m/%Y')
df['Received Date']

# Convert 'Received Date' to datetime format
df['Received Date'] = pd.to_datetime(df['Received Date'], format='%m/%Y')

# Sort the dates from earliest to most recent
sorted_dates = df['Received Date'].sort_values()

# Format the sorted dates to 'MM/YYYY' format
formatted_dates = sorted_dates.dt.strftime('%m/%Y').unique()

# Display the formatted unique dates
formatted_dates

import matplotlib.pyplot as plt
import pandas as pd

# Convert 'Received Date' to datetime format
df['Received Date'] = pd.to_datetime(df['Received Date'], format='%m/%Y')

# Format the dates to 'MM/YYYY'
df['Received Date'] = df['Received Date'].dt.strftime('%m/%Y')

# Define the required date order
date_order = [
    '01/2020', '02/2020', '03/2020', '04/2020', '05/2020', '06/2020',
    '07/2020', '08/2020', '09/2020', '10/2020', '11/2020', '12/2020',
    '01/2021', '02/2021', '03/2021', '04/2021', '05/2021', '06/2021',
    '07/2021', '08/2021', '09/2021', '10/2021', '11/2021', '12/2021',
    '01/2022', '02/2022', '03/2022', '04/2022', '05/2022', '06/2022',
    '07/2022', '08/2022', '09/2022', '10/2022', '11/2022'
]

# Count occurrences of each unique date
date_counts = df['Received Date'].value_counts()

# Ensure all dates in `date_order` exist in `date_counts`, fill missing ones with 0
date_counts = pd.Series({date: date_counts.get(date, 0) for date in date_order})

# Plot horizontal bar chart
plt.figure(figsize=(10, 8))
plt.barh(date_counts.index, date_counts.values, color='skyblue')

# Labels and title
plt.ylabel("Month/Year")
plt.xlabel("Count")
plt.title("Donation's by Month")

# Display the graph
plt.gca().invert_yaxis()  # Ensure the earliest date appears at the top
plt.show()

print(date_counts)
print(f"sum: {date_counts.sum()}")

import matplotlib.pyplot as plt
import pandas as pd

# Convert 'Received Date' to datetime format
df['Received Date'] = pd.to_datetime(df['Received Date'], format='%m/%Y')

# Extract only the month name (e.g., "January", "February") for grouping
df['Month'] = df['Received Date'].dt.month_name()

# Count occurrences of each month
month_counts = df['Month'].value_counts()

# Ensure all months are in order from Jan to Dec
month_order = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
]
month_counts = pd.Series({month: month_counts.get(month, 0) for month in month_order})

# Function to show both percentage and count
def autopct_format(pct, all_values):
    absolute = int(round(pct / 100. * sum(all_values)))
    return f"{pct:.1f}%\n({absolute})"

# Create a high-resolution figure
fig, ax = plt.subplots(figsize=(10, 10), dpi=300)  # Increased DPI for high quality

# Plot pie chart
ax.pie(
    month_counts, labels=month_counts.index,
    autopct=lambda pct: autopct_format(pct, month_counts),
    colors=plt.cm.Paired.colors
)

# Title
ax.set_title("Contributions by Month", fontsize=14)

# Save the high-quality image
plt.savefig("first_graph.png", dpi=300, bbox_inches="tight")  # Save as PNG

# Show the chart
plt.show()

frequency_per_contributor = df.groupby('Contributor')['Frequency'].sum()
print(frequency_per_contributor)

df["Product Name"].unique()

import matplotlib.pyplot as plt

# Count the occurrences of each unique value in 'Product Name'
product_name_counts = df['Product Name'].value_counts().sort_values(ascending=False)

# Get the top N products (e.g., top 10)
top_n = 10
top_product_names = product_name_counts.head(top_n)

# Plot the horizontal bar chart for top N products
plt.figure(figsize=(12, 8))
top_product_names.plot(kind='barh', color='skyblue')

# Adding labels and title
plt.xlabel('Dataset Instances (Count)')
plt.ylabel('Product Category')
plt.title(f'Top {top_n} Donated Product Categories')

# Save the plot with 300 DPI
plt.tight_layout()
plt.savefig('top_donated_products.png', dpi=300)

# Show the plot
plt.show()

